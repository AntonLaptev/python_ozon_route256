  select a.id,a.name,
         case when b.solved_at_least_one_contest_count is null
         then 0
         else b.solved_at_least_one_contest_count end solved_at_least_one_contest_count,
         a.take_part_contest_count
  from
          (select x.id,x.name,count(x.contest_id)  take_part_contest_count 
             from 
                 (select distinct u.id,u.name,p.contest_id
                   from  users u  left join submissions s on s.user_id=u.id
                                  left join problems p on p.id=s.problem_id
               order by u.id)x
        group by x.id,x.name)a
left join
            (select x.id,x.name,count(x.contest_id) solved_at_least_one_contest_count
              from   
                (select distinct u.id,u.name,s.success,p.contest_id
                   from  users u  join submissions s on s.user_id=u.id
                                  join problems p on p.id=s.problem_id
               where s.success=true
               order by u.id)x     
        group by x.id,x.name)b
on a.id=b.id
order by case when b.solved_at_least_one_contest_count is null
         then 0
         else b.solved_at_least_one_contest_count end desc, 
         a.take_part_contest_count desc, 
         a.id
		 
		 S2. Контест: статистика пользователей (SQL, 15 баллов)
ограничение по времени на тест15 секунд
ограничение по памяти на тест1024 мегабайта
вводстандартный ввод
выводстандартный вывод
Это необычная задача — вам надо написать SQL-запрос. В качестве решения вы должны отослать один запрос к базе данных, который возвращает требуемые данные. Запрос может содержать произвольное количество подзапросов, других конструкций, быть сколь угодно навороченным, но это должен быть один запрос (в нём не должна встречаться точка с запятой для разделения разных запросов).

При проверке вашего решения используется PostgreSQL 15.1. В качестве входных данных вам предоставляется дамп состояния базы данных. Обратите внимание, что время работы вашего решения на тесте включает восстановление состояния базы данных из дампа, но это время значительно меньше ограничения по времени. Вы можете использовать сервис http://sqlfiddle.com/ как инструмент для запуска запросов.

В этой задаче вам предстоит написать запрос к базе данных простейшей системы проведения соревнований по программированию. Вы прямо сейчас участвуете в подобном соревновании. Время почувствовать себя в роли разработчика системы для проведения таких соревнований!

Напишите запрос к базе данных, который возвращает всех пользователей вместе с некоторой дополнительной информацией:

количеством соревнований, в которых он принял участие и решил там хотя бы одну задачу, соответствующую колонку в выводе следует назвать solved_at_least_one_contest_count,
количеством соревнований, в которых он принял участие (то есть сделал хотя бы одну попытку решения), соответствующую колонку в выводе следует назвать take_part_contest_count.
Строки в выводе сортируйте в первую очередь по невозрастанию solved_at_least_one_contest_count, затем по невозрастанию take_part_contest_count, затем по возрастанию id.

Внимательно ознакомьтесь с примерами вывода. Ваш запрос должен иметь в точности такой же вывод на примерах.

Схема базы данных содержит четыре таблицы:

users — пользователи системы (описываются двумя полями: id и name),
contests — контесты в системе (описываются двумя полями: id и name),
problems — задачи в системе, каждая задача принадлежит одному контесту (описываются тремя полями: id, contest_id и code, где code — это кодовое короткое название задачи),
submissions — отосланные попытки решения задач, каждая попытка принадлежит одной задаче и одному пользователю (описываются 5
 полями: id, user_id, problem_id, success и submitted_at, где success — это булевское значение была ли попытка успешной и submitted_at — дата-время, когда попытка была совершена).
Таким образом, contests и problems находятся в отношении «один ко многим», submissions и users находятся в отношении «многие к одному», submissions и problems находятся в отношении «многие к одному».

Изучите входные данные примера, чтобы подробно ознакомиться со схемой базы данных. Диаграмма ниже иллюстрирует схему базы данных.


Входные данные
Входными данными в этой задаче является дамп базы данных. Вам он может быть полезен для ознакомления с состоянием базы данных для конкретного теста. В качестве решения вы должны отправить один SQL-запрос.

Выходные данные
Ваш SQL-запрос должен вывести всех пользователей вместе с дополнительными колонками, как написано выше. В точности следуйте требованиям к именованию дополнительных колонок и порядку сортировки.

Внимательно ознакомьтесь с примерами вывода. Ваш запрос должен иметь в точности такой же вывод на примерах.

Примеры
входные данныеСкопировать
create table users (
  id bigint primary key,
  name varchar not null
);

create table contests (
  id bigint primary key,
  name varchar not null
);

create table problems (
  id bigint primary key,
  contest_id bigint,
  code varchar not null,
  constraint fk_problems_contest_id foreign key (contest_id) references contests (id)
);

create unique index on problems (contest_id, code);

create table submissions (
  id bigint primary key,
  user_id bigint,
  problem_id bigint,
  success boolean not null,
  submitted_at timestamp not null,
  constraint fk_submissions_user_id foreign key (user_id) references users (id),
  constraint fk_submissions_problem_id foreign key (problem_id) references problems (id)
);

insert into users
values (1, 'Marie Curie'),
       (2, 'Stephen Hawking'),
       (3, 'Ada Lovelace'),
       (4, 'Albert Einstein'),
       (5, 'Archimedes');

insert into contests
values (1, 'Sandbox-Juniors'),
       (2, 'Sandbox-Seniors'),
       (3, 'Contest-Juniors'),
       (4, 'Contest-Seniors');

insert into problems
values (1, 1, 'A'),
       (2, 2, 'A'),
       (3, 3, 'A'),
       (4, 3, 'B'),
       (5, 4, 'A'),
       (6, 4, 'B');

insert into submissions
values (1, 2, 2, false, '2023-02-05 11:01:00'),
       (2, 2, 2, true, '2023-02-05 11:02:00'),
       (3, 2, 6, true, '2023-02-05 11:03:01'),
       (4, 2, 1, true, '2023-02-05 11:04:00'),
       (5, 2, 1, true, '2023-02-05 11:05:00'),
       (6, 3, 6, true, '2023-02-05 11:06:00'),
       (17, 1, 6, true, '2023-02-05 11:03:00'),
       (8, 1, 2, true, '2023-02-05 11:08:00'),
       (9, 1, 1, false, '2023-02-05 11:09:00'),
       (10, 3, 1, false, '2023-02-05 11:10:00'),
       (11, 5, 5, false, '2023-02-05 11:11:00'),
       (13, 2, 6, true, '2023-02-05 11:03:00'),
       (14, 3, 6, false, '2023-02-05 11:05:59'),
       (15, 1, 6, true, '2023-02-05 11:04:00');
выходные данныеСкопировать
 id |      name       | solved_at_least_one_contest_count | take_part_contest_count
----+-----------------+-----------------------------------+-------------------------
  2 | Stephen Hawking |                                 3 |                       3
  1 | Marie Curie     |                                 2 |                       3
  3 | Ada Lovelace    |                                 1 |                       2
  5 | Archimedes      |                                 0 |                       1
  4 | Albert Einstein |                                 0 |                       0
(5 rows)
входные данныеСкопировать
create table users (
  id bigint primary key,
  name varchar not null
);

create table contests (
  id bigint primary key,
  name varchar not null
);

create table problems (
  id bigint primary key,
  contest_id bigint,
  code varchar not null,
  constraint fk_problems_contest_id foreign key (contest_id) references contests (id)
);

create unique index on problems (contest_id, code);

create table submissions (
  id bigint primary key,
  user_id bigint,
  problem_id bigint,
  success boolean not null,
  submitted_at timestamp not null,
  constraint fk_submissions_user_id foreign key (user_id) references users (id),
  constraint fk_submissions_problem_id foreign key (problem_id) references problems (id)
);

insert into users
values (1, 'Olivia'),
       (2, 'Henry'),
       (3, 'Lucas'),
       (4, 'John'),
       (5, 'Charlotte'),
       (6, 'Henry');

insert into contests
values (3, 'Main'),
       (1, 'Practice');

insert into problems
values (1, 3, 'A'),
       (2, 3, 'B'),
       (3, 1, 'A');

insert into submissions
values (10, 3, 2, false, '2023-02-05 11:05:12'),
       (20, 3, 2, true, '2023-02-05 11:07:49'), 
       (30, 3, 2, true, '2023-02-05 11:07:49'),
       (40, 3, 1, false, '2023-02-05 11:01:32'), 
       (50, 3, 1, false, '2023-02-05 11:11:46'), 
       (60, 3, 1, false, '2023-02-05 11:27:05'),
       (70, 6, 2, false, '2023-02-05 11:04:00'),
       (80, 6, 2, true, '2023-02-05 11:05:00'),
       (90, 6, 2, false, '2023-02-05 11:06:00'),
       (100, 6, 2, true, '2023-02-05 11:07:00'),
       (110, 6, 1, false, '2023-02-05 11:08:00'),
       (120, 6, 1, true, '2023-02-05 11:09:00'),
       (130, 2, 2, false, '2023-02-05 11:00:01'),
       (150, 5, 1, false, '2023-02-05 11:07:48'),
       (160, 5, 1, true, '2023-02-05 11:07:49'),
       (170, 5, 1, true, '2023-02-05 11:07:50'),
       (180, 1, 3, false, '2023-02-04 15:00:01'),
       (190, 1, 3, true, '2023-02-04 15:00:01'),
       (200, 5, 3, true, '2023-02-04 15:00:01'),
       (210, 5, 3, false, '2023-02-04 15:00:01'),
       (220, 2, 3, false, '2023-02-04 15:00:01'),
       (230, 6, 3, false, '2023-02-04 15:00:01'),
       (240, 6, 3, false, '2023-02-04 15:00:01');
выходные данныеСкопировать
 id |   name    | solved_at_least_one_contest_count | take_part_contest_count
----+-----------+-----------------------------------+-------------------------
  5 | Charlotte |                                 2 |                       2
  6 | Henry     |                                 1 |                       2
  1 | Olivia    |                                 1 |                       1
  3 | Lucas     |                                 1 |                       1
  2 | Henry     |                                 0 |                       2
  4 | John      |                                 0 |                       0
(6 rows)