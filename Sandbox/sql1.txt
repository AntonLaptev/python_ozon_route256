select distinct u.id,u.name from users u
  join orders o on u.id=o.user_id
 order by u.name,u.id
 
 
 K. Пользователи и заказы (SQL, 10 баллов)
ограничение по времени на тест15 секунд
ограничение по памяти на тест1024 мегабайта
вводстандартный ввод
выводстандартный вывод
Это необычная задача — вам надо написать SQL-запрос. В качестве решения вы должны отослать один запрос к базе данных, который возвращает требуемые данные. При проверке вашего решения используется PostgreSQL 15.1. В качестве входных данных вам предоставляется дамп состояния базы данных. Обратите внимание, что время работы вашего решения на тесте включает восстановление состояния базы данных из дампа, но это время значительно меньше ограничения по времени. Вы можете использовать сервис http://sqlfiddle.com/ как инструмент для запуска запросов.

Напишите запрос к базе данных, который возвращает всех пользователей, сделавших хотя бы один заказ. Выведите всех таких пользователей, отсортировав их по имени (при равенстве по id).

Схема базы данных содержит две таблицы: users и orders, которые связаны отношением «один ко многим». Изучите входные данные примера, чтобы подробно ознакомиться со схемой базы данных. Диаграмма ниже иллюстрирует схему базы данных.


Входные данные
Входными данными в этой задаче является дамп базы данных. Вам он может быть полезен для ознакомления с состоянием базы данных для конкретного теста. В качестве решения вы должны отправить один SQL-запрос.

Выходные данные
Ваш SQL-запрос должен вывести всех пользователей в порядке неубывания их имён (по возрастанию id при равенстве имён). Используйте collation по умолчанию.

Пример
входные данныеСкопировать
create table users
(
    id   bigint primary key,
    name varchar not null
);

insert into users
values (1, 'john'),
       (2, 'Liza'),
       (7, 'Odin'),
       (11, 'donatello'),
       (17, 'spider-man'),
       (19, 'Elen'),
       (20, 'Liza');

create table orders
(
    id         bigint primary key,
    user_id    bigint  not null,
    product    varchar not null,
    constraint fk_orders_user_id foreign key (user_id) references users (id)
);

insert into orders
values (101, 17, 'pizza'),
       (107, 2, 'toothpaste'),
       (108, 19, 'candies'),
       (109, 20, 'pizza'),
       (200, 17, 'shampoo'),
       (205, 2, 'pizza'),
       (210, 19, 'toothpaste'),
       (220, 19, 'pizza'),
       (221, 11, 'shampoo'),
       (222, 19, 'pizza');
выходные данныеСкопировать
 id |    name
----+------------
 11 | donatello
 19 | Elen
  2 | Liza
 20 | Liza
 17 | spider-man
(5 rows)